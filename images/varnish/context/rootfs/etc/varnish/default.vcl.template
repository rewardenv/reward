vcl 4.0;

import std;
# The minimal Varnish version is 6.0
{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
import dynamic;
{{- end }}

backend default {
{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
    .host = "";
{{- else }}
    .host = "{{ getenv "BACKEND_HOST" "nginx" }}";
{{- end }}
    .port = "{{ getenv "BACKEND_PORT" "80" }}";
    .first_byte_timeout = {{ getenv "FIRST_BYTE_TIMEOUT" "3600s" }};
    .between_bytes_timeout = {{ getenv "BETWEEN_BYTES_TIMEOUT" "300s" }};
}

{{- if eq (getenv "PROBE_ENABLED" "false") "true" }}
probe healthcheck {
    .url = "{{ getenv "PROBE_URL" "health_check.php" }}";
    .timeout = {{ getenv "PROBE_TIMEOUT" "2s" }};
    .interval = {{ getenv "PROBE_INTERVAL" "5s" }};
    .window = {{ getenv "PROBE_WINDOW" "10" }};
    .threshold = {{ getenv "PROBE_THRESHOLD" "5" }};
}
{{- else }}
#probe healthcheck {
#    .url = "{{ getenv "PROBE_URL" "health_check.php" }}";
#    .timeout = {{ getenv "PROBE_TIMEOUT" "2s" }};
#    .interval = {{ getenv "PROBE_INTERVAL" "5s" }};
#    .window = {{ getenv "PROBE_WINDOW" "10" }};
#    .threshold = {{ getenv "PROBE_THRESHOLD" "5" }};
#}
{{- end }}

acl purge {
    {{- range ( getenv "ACL_PURGE_HOST" "0.0.0.0/0" | strings.Split "," ) }}
    "{{.}}";
    {{- end }}
}

{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
sub vcl_init {
    new ddir = dynamic.director(
        port = "{{ getenv "BACKEND_PORT" "80" }}",
        {{- if eq (getenv "PROBE_ENABLED" "false") "true" }}
        probe = healthcheck,
        {{- else }}
        #probe = healthcheck,
        {{- end }}
        ttl = {{ getenv "DDIR_TTL" "60s" }},
    );
}
{{- end }}

sub vcl_recv {
    # Healthcheck
    if (req.url == "/varnishcheck") {
        return (synth(751, "health check OK!"));
    }

{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
    # Configure Dynamic Director
    set req.backend_hint = ddir.backend("{{ getenv "BACKEND_HOST" "nginx" }}");
{{- end }}

    # https://stackoverflow.com/questions/35345232/matching-last-non-private-ip-address-in-an-x-forwarded-for-header
    if (! req.http.x-real-ip) {
        set req.http.X-Real-IP = regsub(req.http.X-Forwarded-For, ".*\b(?!127\.|10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.|192\.168\.)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}).*", "\1");
    }

    if (req.method == "PURGE") {
        if (client.ip !~ purge) {
            return (synth(405, "Method not allowed"));
        }
        # To use the X-Pool header for purging varnish during automated deployments, make sure the X-Pool header
        # has been added to the response in your backend server config. This is used, for example, by the
        # capistrano-magento2 gem for purging old content from varnish during it's deploy routine.
        if (!req.http.X-Magento-Tags-Pattern && !req.http.X-Pool) {
            return (synth(400, "X-Magento-Tags-Pattern or X-Pool header required"));
        }
        if (req.http.X-Magento-Tags-Pattern) {
            ban("obj.http.X-Magento-Tags ~ " + req.http.X-Magento-Tags-Pattern);
        }
        if (req.http.X-Pool) {
            ban("obj.http.X-Pool ~ " + req.http.X-Pool);
        }
        return (synth(200, "Purged"));
    }

    if (req.method != "GET" &&
        req.method != "HEAD" &&
        req.method != "PUT" &&
        req.method != "POST" &&
        req.method != "TRACE" &&
        req.method != "OPTIONS" &&
        req.method != "DELETE") {
            /* Non-RFC2616 or CONNECT which is weird. */
            return (pipe);
    }

    # Handle profile requests from Blackfire browser plugin
    if (req.http.X-Blackfire-Query) {
        # ESI request should not be included in the profile (doc page: http://bit.ly/2GdiE1S)
        if (req.esi_level > 0) {
            unset req.http.X-Blackfire-Query;
        } else {
            return (pass);
        }
    }

    # We only deal with GET and HEAD by default
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    # Bypass customer, shopping cart, checkout
    if (req.url ~ "/customer" || req.url ~ "/checkout") {
        return (pass);
    }

    # Bypass health check requests
    if (req.url ~ "^/(pub/)?(health_check.php)$") {
        return (pass);
    }

    # Set initial grace period usage status
    set req.http.grace = "none";

    # normalize url in case of leading HTTP scheme and domain
    set req.url = regsub(req.url, "^http[s]?://", "");

    # collect all cookies
    std.collect(req.http.Cookie);

    # Compression filter. See https://www.varnish-cache.org/trac/wiki/FAQ/Compression
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|jpeg|png|gif|gz|tgz|bz2|tbz|mp3|ogg|swf|flv)$") {
            # No point in compressing these
            unset req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unknown algorithm
            unset req.http.Accept-Encoding;
        }
    }

    # Remove all marketing get parameters to minimize the cache objects
    if (req.url ~ "(\?|&)(gclid|cx|ie|cof|siteurl|zanpid|origin|fbclid|mc_[a-z]+|utm_[a-z]+|_bta_[a-z]+)=") {
        set req.url = regsuball(req.url, "(gclid|cx|ie|cof|siteurl|zanpid|origin|fbclid|mc_[a-z]+|utm_[a-z]+|_bta_[a-z]+)=[-_A-z0-9+()%.]+&?", "");
        set req.url = regsub(req.url, "[?|&]+$", "");
    }

    # Static files caching
    if (req.url ~ "^/(pub/)?(media|static)/") {
        # Static files should not be cached by default
        return (pass);
    }

    # Bypass authenticated GraphQL requests without a X-Magento-Cache-Id
    if (req.url ~ "/graphql" && !req.http.X-Magento-Cache-Id && req.http.Authorization ~ "^Bearer") {
        return (pass);
    }

    return (hash);
}

sub vcl_hash {
    if ((req.url !~ "/graphql" || !req.http.X-Magento-Cache-Id) && req.http.cookie ~ "X-Magento-Vary=") {
        hash_data(regsub(req.http.cookie, "^.*?X-Magento-Vary=([^;]+);*.*$", "\1"));
    }

    # Cache AJAX replies separately than non-AJAX
    if (req.http.X-Requested-With) {
        hash_data(req.http.X-Requested-With);
    }

    # To make sure http users don't see ssl warning
    if (req.http.X-Forwarded-Proto) {
        hash_data(req.http.X-Forwarded-Proto);
    }

    if (req.url ~ "/graphql") {
        call process_graphql_headers;
    }
}

sub process_graphql_headers {
    if (req.http.X-Magento-Cache-Id) {
        hash_data(req.http.X-Magento-Cache-Id);

        # When the frontend stops sending the auth token, make sure users stop getting results cached for logged-in users
        if (req.http.Authorization ~ "^Bearer") {
            hash_data("Authorized");
        }
    }

    if (req.http.Store) {
        hash_data(req.http.Store);
    }
    if (req.http.Content-Currency) {
        hash_data(req.http.Content-Currency);
    }
}

sub vcl_backend_response {

    set beresp.grace = 3d;

    if (beresp.http.content-type ~ "text") {
        set beresp.do_esi = true;
    }

    if (bereq.url ~ "\.js$" || beresp.http.content-type ~ "text") {
        set beresp.do_gzip = true;
    }

    if (beresp.http.X-Magento-Debug) {
        set beresp.http.X-Magento-Cache-Control = beresp.http.Cache-Control;
    }

    # cache only successfully responses and 404s
    if (beresp.status != 200 &&
            beresp.status != 404 &&
            beresp.http.Cache-Control ~ "private") {
        set beresp.uncacheable = true;
        set beresp.ttl = 86400s;
        return (deliver);
    }

    # validate if we need to cache it and prevent from setting cookie
    if (beresp.ttl > 0s && (bereq.method == "GET" || bereq.method == "HEAD")) {
        unset beresp.http.set-cookie;
    }

    # If page is not cacheable then bypass varnish for 2 minutes as Hit-For-Pass
    if (beresp.ttl <= 0s ||
        beresp.http.Surrogate-control ~ "no-store" ||
        (!beresp.http.Surrogate-Control &&
        beresp.http.Cache-Control ~ "no-cache|no-store") ||
        beresp.http.Vary == "*") {
            # Mark as Hit-For-Pass for the next 2 minutes
            set beresp.ttl = 120s;
            set beresp.uncacheable = true;
    }

    # If the cache key in the Magento response doesn't match the one that was sent in the request, don't cache under the request's key
    if (bereq.url ~ "/graphql" && bereq.http.X-Magento-Cache-Id && bereq.http.X-Magento-Cache-Id != beresp.http.X-Magento-Cache-Id) {
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
    }

    return (deliver);
}

sub vcl_deliver {
    # Always include hit/miss information in response
    if (resp.http.x-varnish ~ " ") {
        set resp.http.X-Magento-Cache-Debug = "HIT";
        set resp.http.Grace = req.http.grace;
    } else {
        set resp.http.X-Magento-Cache-Debug = "MISS";
    }
    set resp.http.X-Cache-Hits = obj.hits;

    # Not letting browser to cache non-static files.
    if (resp.http.Cache-Control !~ "private" && req.url !~ "^/(pub/)?(media|static)/") {
        set resp.http.Pragma = "no-cache";
        set resp.http.Expires = "-1";
        set resp.http.Cache-Control = "no-store, no-cache, must-revalidate, max-age=0";
    }

    if (!resp.http.X-Magento-Debug) {
        unset resp.http.Age;
    }
    unset resp.http.X-Magento-Debug;
    unset resp.http.X-Magento-Tags;
    unset resp.http.X-Powered-By;
    unset resp.http.Server;
    unset resp.http.X-Varnish;
    unset resp.http.Via;
    unset resp.http.Link;
}

sub vcl_hit {
    if (obj.ttl >= 0s) {
        # Hit within TTL period
        return (deliver);
    }
    if (std.healthy(req.backend_hint)) {
        if (obj.ttl + 300s > 0s) {
            # Hit after TTL expiration, but within grace period
            set req.http.grace = "normal (healthy server)";
            return (deliver);
        } else {
            # Hit after TTL and grace expiration
            return (restart);
        }
    } else {
        # server is not healthy, retrieve from cache
        set req.http.grace = "unlimited (unhealthy server)";
        return (deliver);
    }
}

sub vcl_synth {
    # Healthcheck
    if (resp.status == 751) {
        set resp.status = 200;
        return (deliver);
    }
}
