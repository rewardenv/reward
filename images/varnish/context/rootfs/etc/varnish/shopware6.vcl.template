vcl 4.1;

import std;
import xkey;
import cookie;
# The minimal Varnish version is 6.0
{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
import dynamic;
{{- end }}

backend default {
{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
    .host = "";
{{- else }}
    .host = "{{ getenv "BACKEND_HOST" "nginx" }}";
{{- end }}
    .port = "{{ getenv "BACKEND_PORT" "80" }}";
    .first_byte_timeout = {{ getenv "FIRST_BYTE_TIMEOUT" "3600s" }};
    .between_bytes_timeout = {{ getenv "BETWEEN_BYTES_TIMEOUT" "300s" }};
}

{{- if eq (getenv "PROBE_ENABLED" "false") "true" }}
probe healthcheck {
    .url = "{{ getenv "PROBE_URL" "/healthz/php-fpm" }}";
    .timeout = {{ getenv "PROBE_TIMEOUT" "2s" }};
    .interval = {{ getenv "PROBE_INTERVAL" "5s" }};
    .window = {{ getenv "PROBE_WINDOW" "10" }};
    .threshold = {{ getenv "PROBE_THRESHOLD" "5" }};
}
{{- else }}
#probe healthcheck {
#    .url = "{{ getenv "PROBE_URL" "index.php" }}";
#    .timeout = {{ getenv "PROBE_TIMEOUT" "2s" }};
#    .interval = {{ getenv "PROBE_INTERVAL" "5s" }};
#    .window = {{ getenv "PROBE_WINDOW" "10" }};
#    .threshold = {{ getenv "PROBE_THRESHOLD" "5" }};
#}
{{- end }}

acl purge {
    "127.0.0.1";
    "localhost";
    "::1";
    {{- range ( getenv "ACL_PURGE_HOST" "0.0.0.0/0" | strings.Split "," ) }}
    "{{.}}";
    {{- end }}
}

{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
sub vcl_init {
    new ddir = dynamic.director(
        port = "{{ getenv "BACKEND_PORT" "80" }}",
        {{- if eq (getenv "PROBE_ENABLED" "false") "true" }}
        probe = healthcheck,
        {{- else }}
        #probe = healthcheck,
        {{- end }}
        ttl = {{ getenv "DDIR_TTL" "60s" }},
    );
}
{{- end }}

sub vcl_recv {
    # Healthcheck
    if (req.url == "/healthz/varnish") {
        return (synth(751, "ok"));
    }

    # Bypass healthchecks
    if (req.url ~ "/healthz") {
        return (pass);
    }

{{- if eq (getenv "VMOD_DYNAMIC_ENABLED" "true") "true" }}
    # Configure Dynamic Director
    set req.backend_hint = ddir.backend("{{ getenv "BACKEND_HOST" "nginx" }}");
{{- end }}

    # Handle PURGE
    if (req.method == "PURGE") {
        if (client.ip !~ purge) {
            return (synth(403, "Forbidden"));
        }
        if (req.http.xkey) {
            set req.http.n-gone = xkey.purge(req.http.xkey);

            return (synth(200, "Invalidated "+req.http.n-gone+" objects"));
        } else {
            return (purge);
        }
    }

    if (req.method == "BAN") {
        if (!client.ip ~ purge) {
            return (synth(403, "Forbidden"));
        }

        ban("req.url ~ "+req.url);
        return (synth(200, "BAN URLs containing (" + req.url + ") done."));
    }

    # Only handle relevant HTTP request methods
    if (req.method != "GET" &&
        req.method != "HEAD" &&
        req.method != "PUT" &&
        req.method != "POST" &&
        req.method != "PATCH" &&
        req.method != "TRACE" &&
        req.method != "OPTIONS" &&
        req.method != "DELETE") {
          return (pipe);
    }

    if (req.http.Authorization) {
        return (pass);
    }

    # Do not handle requests going through SPX
    if (req.http.Cookie ~ "SPX_ENABLED" || req.http.Cookie ~ "SPX_KEY" || req.url ~ "(?i)(\?|\&)SPX_UI_URI=" || req.url ~ "(?i)(\?|\&)SPX_KEY=") {
        return (pass);
    }

    # We only deal with GET and HEAD by default
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    # Always pass these paths directly to php without caching
    # Note: virtual URLs might bypass this rule (e.g. /en/checkout)
    if (req.url ~ "^/(checkout|account|admin|api)(/.*)?$") {
        return (pass);
    }

    cookie.parse(req.http.cookie);

    set req.http.cache-hash = cookie.get("sw-cache-hash");
    set req.http.currency = cookie.get("sw-currency");
    set req.http.states = cookie.get("sw-states");

    if (req.url == "/widgets/checkout/info" && !req.http.states ~ "cart-filled") {
        return (synth(204, ""));
    }

    #  Ignore query strings that are only necessary for the js on the client. Customize as needed.
    if (req.url ~ "(\?|&)(pk_campaign|piwik_campaign|pk_kwd|piwik_kwd|pk_keyword|pixelId|kwid|kw|adid|chl|dv|nk|pa|camid|adgid|cx|ie|cof|siteurl|utm_[a-z]+|_ga|gclid)=") {
        # see rfc3986#section-2.3 "Unreserved Characters" for regex
        set req.url = regsuball(req.url, "(pk_campaign|piwik_campaign|pk_kwd|piwik_kwd|pk_keyword|pixelId|kwid|kw|adid|chl|dv|nk|pa|camid|adgid|cx|ie|cof|siteurl|utm_[a-z]+|_ga|gclid)=[A-Za-z0-9\-\_\.\~]+&?", "");
    }

    set req.url = regsub(req.url, "(\?|\?&|&)$", "");

    # Normalize query arguments
    set req.url = std.querysort(req.url);

    # Set a header announcing Surrogate Capability to the origin
    set req.http.Surrogate-Capability = "shopware=ESI/1.0";

    # Make sure that the client ip is forward to the client.
    if (req.http.x-forwarded-for) {
        set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
    } else {
        set req.http.X-Forwarded-For = client.ip;
    }

    return (hash);
}

sub vcl_hash {
    # Consider Shopware HTTP cache cookies
    if (req.http.cache-hash != "") {
        hash_data("+context=" + req.http.cache-hash);
    } elseif (req.http.currency != "") {
        hash_data("+currency=" + req.http.currency);
    }
}

sub vcl_hit {
  # Consider client states for response headers
  if (req.http.states) {
     if (req.http.states ~ "logged-in" && obj.http.sw-invalidation-states ~ "logged-in" ) {
        return (pass);
     }

     if (req.http.states ~ "cart-filled" && obj.http.sw-invalidation-states ~ "cart-filled" ) {
        return (pass);
     }
  }
}

sub vcl_backend_fetch {
    unset bereq.http.cache-hash;
    unset bereq.http.currency;
    unset bereq.http.states;
}

sub vcl_backend_response {
    # Serve stale content for three days after object expiration
    set beresp.grace = 3d;

    unset beresp.http.X-Powered-By;
    unset beresp.http.Server;

    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
        return (deliver);
    }

    if (bereq.url ~ "\.js$" || beresp.http.content-type ~ "text") {
        set beresp.do_gzip = true;
    }

    if (beresp.ttl > 0s && (bereq.method == "GET" || bereq.method == "HEAD")) {
        unset beresp.http.Set-Cookie;
    }
}

sub vcl_deliver {
    ## we don't want the client to cache
    if (resp.http.Cache-Control !~ "private" && req.url !~ "^/(theme|media|thumbnail|bundles)/") {
        set resp.http.Pragma = "no-cache";
        set resp.http.Expires = "-1";
        set resp.http.Cache-Control = "no-store, no-cache, must-revalidate, max-age=0";
    }

    # invalidation headers are only for internal use
    unset resp.http.sw-invalidation-states;
    unset resp.http.xkey;
    unset resp.http.X-Varnish;
    unset resp.http.Via;
    unset resp.http.Link;
}

sub vcl_synth {
    # Healthcheck
    if (resp.status == 751) {
        set resp.status = 200;
        return (deliver);
    }
}
