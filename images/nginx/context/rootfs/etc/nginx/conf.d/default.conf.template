# default Docker DNS server
resolver {{ getenv "NGINX_RESOLVER" "127.0.0.11" }};

map_hash_max_size 2048;
map_hash_bucket_size 256;

# Select upstream backend to use based on presence of Xdebug cookies or request args and Blackfire headers
map "$http_X_BLACKFIRE_QUERY:$cookie_XDEBUG_SESSION$cookie_XDEBUG_PROFILE$cookie_XDEBUG_TRACE$arg_XDEBUG_SESSION$arg_XDEBUG_SESSION_START:$cookie_SPX_ENABLED$cookie_SPX_KEY$arg_SPX_ENABLED$arg_SPX_KEY$arg_SPX_UI_URI" $fastcgi_backend {
    # Nothing for debug and nothing for blackfire means its a pure request
    "::" {{ getenv "NGINX_UPSTREAM_HOST" "php-fpm" }}:{{ getenv "NGINX_UPSTREAM_PORT" "9000" }};

    # Use blackfire if the blackfire query is specified AND no debug cookie is set
    "~::$" {{ getenv "NGINX_UPSTREAM_BLACKFIRE_HOST" "php-blackfire" }}:{{ getenv "NGINX_UPSTREAM_BLACKFIRE_PORT" "9000" }};

    # Use SPX if the SPX cookie is specified AND no xdebug cookie is set
    "~::.+" {{ getenv "NGINX_UPSTREAM_SPX_HOST" "php-spx" }}:{{ getenv "NGINX_UPSTREAM_SPX_PORT" "9000" }};

    # In all other cases, a debug cookie will be present; use debug container
    default {{ getenv "NGINX_UPSTREAM_DEBUG_HOST" "php-debug" }}:{{ getenv "NGINX_UPSTREAM_DEBUG_PORT" "9000" }};
}

{{- $default_exists := false }}
{{- range $i := ( math.Seq 0 99 ) }}
{{- $varname := printf "NGINX_HOST_MAPPING_%v" $i }}
{{- range $key, $value := ( strings.Split ":" ( getenv $varname ) ) }}
{{- if eq $value "default" }}
{{- $default_exists = true -}}
{{- end }}
{{- end }}
{{- end }}

map $http_host $MAGE_RUN_CODE {
{{- range $i := ( math.Seq 0 99 ) }}
{{- $varname := printf "NGINX_HOST_MAPPING_%v" $i }}
{{- $vals :=  ( strings.Split ":" ( getenv $varname ) ) }}
{{- $length := len $vals }}{{- if not ( eq $length 3 ) }}{{- continue }}
{{- end }}
    {{ index $vals 0 }} {{ index $vals 1 }};
{{- end }}
{{- if not $default_exists }}
    default "";
{{- end }}
}

map $http_host $MAGE_RUN_TYPE {
{{- range $i := ( math.Seq 0 99 ) }}
{{- $varname := printf "NGINX_HOST_MAPPING_%v" $i }}
{{- $vals :=  ( strings.Split ":" ( getenv $varname ) ) }}
{{- $length := len $vals }}{{- if not ( eq $length 3 ) }}{{- continue }}
{{- end }}
    {{ index $vals 0 }} {{ index $vals 2 }};
{{- end }}
{{- if not $default_exists }}
    default "";
{{- end }}
}

set_real_ip_from 10.0.0.0/8;
set_real_ip_from 172.16.0.0/12;
set_real_ip_from 192.168.0.0/16;
real_ip_recursive on;
real_ip_header X-Forwarded-For;

map $http_x_forwarded_for $realip {
    ~^(\d+\.\d+\.\d+\.\d+) $1;
    default $remote_addr;
}

map $http_x_forwarded_proto $fastcgi_https {
    default '';
    https on;
}

geo $internal_ip {
    default 0;
    127.0.0.1 1;
    10.0.0.0/8 1;
    172.16.0.0/12 1;
    192.168.0.0/16 1;
}

map $http_x_health_check $health_check {
    "internal" 1;
    default 0;
}

map $internal_ip$health_check $allowed {
    "00" 0;
    "01" 1;
    "10" 1;
    "11" 1;
}

include /etc/nginx/snippets.d/http-*.conf;
include /etc/nginx/snippets/http-*.conf;

server {
    listen {{ getenv "NGINX_LISTEN_HTTP" "80" }};

    root {{ getenv "NGINX_ROOT" "/var/www/html" }}{{ getenv "NGINX_PUBLIC" "" }};
    set $MAGE_ROOT {{ getenv "NGINX_ROOT" "/var/www/html" }};

    index index.html index.php;
    autoindex off;
    charset UTF-8;

    include /etc/nginx/snippets.d/server-*.conf;
    include /etc/nginx/snippets/server-*.conf;
    include /etc/nginx/available.d/{{ getenv "NGINX_TEMPLATE" "application.conf" }};
}
